pipeline {
    agent any
    parameters {
        choice(choices: 'test\nstage\nuat\nuat2', description: 'Which environment?', name: 'DEPLOY_TO')
        gitParameter branch: '', branchFilter: 'origin/(.*)', defaultValue: '', name: 'BRANCH_TAG', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'DESCENDING_SMART', tagFilter: '*', type: 'PT_BRANCH_TAG' 
    }
    
    environment {
    DOCKER_BUILDKIT='1'
    ACR_URL = "neuralraysacr.azurecr.io"
    ACR_CRED = 'docker'
    GIT_TAG = sh(returnStdout: true, script: 'git tag -l v*  | tail -n1').trim()
  }
  
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: "${params.BRANCH_TAG}"]], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          gitTool: 'Default', 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[url: 'https://neuralrays@dev.azure.com/neuralrays/N7/_git/LNReact',credentialsId: 'Azure-repo',]]
                        ])
            }
        } 
         stage("Deploy to TEST") {
            when {
                environment name: 'DEPLOY_TO', value: 'test'
            }
            steps {
                 script{
                     echo "I am ${params.DEPLOY_TO}"
                    echo  "Branch = ${params.BRANCH_TAG}"
                    DOCKER_IMAGE = "$ACR_URL/mobilefe"
                    docker.build("${DOCKER_IMAGE}:${params.DEPLOY_TO}","-f Dockerfile .")
                    docker.build("${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}","-f Dockerfile .")
                    withDockerRegistry(credentialsId: 'docker', url: "http://${ACR_URL}") {
                            docker.image("${DOCKER_IMAGE}:${params.DEPLOY_TO}").push()
                            docker.image("${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}").push()
                        }
                    sh label: 'docker_image_delete', script: "docker rmi ${DOCKER_IMAGE}:${params.DEPLOY_TO}"
                    sh label: 'docker_image_remove', script: "docker rmi ${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}"
                }
	        }
        }

        stage("Deploy to STAGE") {
            when {
                environment name: 'DEPLOY_TO', value: 'stage'
            }
            steps {
                 script{
                     echo "I am ${params.DEPLOY_TO}"
                    echo  "Branch = ${params.BRANCH_TAG}"
                    DOCKER_IMAGE = "$ACR_URL/lnfrontend"
                    docker.build("${DOCKER_IMAGE}:${params.DEPLOY_TO}","-f QaDockerfile .")
                    docker.build("${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}","-f QaDockerfile .")
                    withDockerRegistry(credentialsId: 'docker', url: "http://${ACR_URL}") {
                            docker.image("${DOCKER_IMAGE}:${params.DEPLOY_TO}").push()
                            docker.image("${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}").push()
                        }
                    sh label: 'docker_image_delete', script: "docker rmi ${DOCKER_IMAGE}:${params.DEPLOY_TO}"
                    sh label: 'docker_image_remove', script: "docker rmi ${DOCKER_IMAGE}:${params.DEPLOY_TO}-${params.BRANCH_TAG}"
                }
	        }
        }
    }
    post {
        always {
                cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,)
        }
    }
}